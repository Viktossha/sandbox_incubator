//–ù–µ–¥–∞–≤–Ω–æ –ö–∏—Ä–∏–ª–ª –Ω–∞—à–µ–ª —Å—Ç—Ä–æ–∫—É –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ï–º—É —Å—Ç–∞–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º. –°—Ç—Ä–æ–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, –µ—Å–ª–∏ –∏–∑ –Ω–µ–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª, —á—Ç–æ–±—ã –æ–Ω–∞ —á–∏—Ç–∞–ª–∞—Å—å —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ —Ç–∞–∫–∂–µ, –∫–∞–∫ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ. –ü–æ–º–æ–≥–∏—Ç–µ –ö–∏—Ä–∏–ª–ª—É —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å. –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –í –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–æ—á–Ω—ã—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤. –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –í—ã–≤–µ–¥–∏—Ç–µ Ôªø ùëå ùê∏ ùëÜ YESÔªø, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, Ôªø ùëÅ ùëÇ NOÔªø –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ. –ó–∞–º–µ—á–∞–Ω–∏–µ –í –ø–µ—Ä–≤–æ–º –ø—Ä–∏–º–µ—Ä–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏, —Ç–æ–≥–¥–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ "aba"
function isPalindrome (str) {
    res = 0

    for (let i = 0; i < str.length; i++) {
        let newStr = str.slice(0, i) + str.slice(i+1)
        if (newStr === newStr.split('').reverse().join('')) {
            res += 1
        }
    }
    return res > 0 ? 'YES' : 'NO'
}

//–ü–µ—Ç—è –∏–≥—Ä–∞–ª –Ω–∞ —á–µ—Ä–¥–∞–∫–µ –∏ –Ω–∞—à–µ–ª –≤ —Å—É–Ω–¥—É–∫–µ –∑–∞–ø—ã–ª–∏–≤—à–∏–π—Å—è –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ü–µ—Ç–µ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –≤ —ç—Ç–æ–º –º–∞—Å—Å–∏–≤–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏ –µ–≥–æ –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å. –ü–µ—Ç—è –µ—â–µ –Ω–µ —Ö–æ–¥–∏—Ç –≤ —à–∫–æ–ª—É, –ø–æ—ç—Ç–æ–º—É –æ–Ω —É–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ–ª–∏—Ç—å —á–∏—Å–ª–∞ –Ω–∞ 2 —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –≤–Ω–∏–∑. –¢–µ–ø–µ—Ä—å –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–Ω –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –æ–Ω –º–æ–∂–µ—Ç —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Ä–∞–∑ –ø—Ä–æ–¥–µ–ª—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ. –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ Ôªø ùëõ nÔªø –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ Ôªø ( 1 ‚â§ ùëõ ‚â§ 2 ‚ãÖ 1 0 5 ) . (1‚â§n‚â§2‚ãÖ10 5 ).Ôªø –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª Ôªø ùëé aÔªø –¥–ª–∏–Ω—ã Ôªø ùëõ ( 1 ‚â§ ùëé ùëñ ‚â§ 1 0 9 ) . n(1‚â§a i ‚Äã ‚â§10 9 ).Ôªø –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –í—ã–≤–µ–¥–∏—Ç–µ, –∫–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.
function howManyNumbers(startArr) {
    let res = new Set();  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª

    for (let i = 0; i < startArr.length; i++) {
        let n = startArr[i];
        while (n > 0) {
            res.add(n);  // –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ –≤ Set (–µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å, –æ–Ω–æ –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è)
            n = Math.floor(n / 2);  // –î–µ–ª–∏–º —á–∏—Å–ª–æ –Ω–∞ 2 —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –≤–Ω–∏–∑
        }
    }

    return res.size;  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
}

//–£ –º–∞–ª—å—á–∏–∫–∞ –û–ª–µ–≥–∞ —Å–µ–≥–æ–¥–Ω—è –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è, –µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è 10 –ª–µ—Ç. –¢–∞–∫ –∫–∞–∫ 10 –ª–µ—Ç –æ—Å–æ–±—ã–π –≤–æ–∑—Ä–∞—Å—Ç, —Ç–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –ø–æ–¥–∞—Ä–∏–ª–∏ –µ–º—É –æ—Å–æ–±—ã–π –ø–æ–¥–∞—Ä–æ–∫: –º–∞—Å—Å–∏–≤ –∏–∑ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10. –û–±—Ä–∞–¥–æ–≤–∞–≤—à–∏—Å—å —Ç–∞–∫–æ–º—É –ø–æ–¥–∞—Ä–∫—É, –æ–Ω —Å—Ä–∞–∑—É –Ω–∞—á–∞–ª –∏–∑—É—á–∞—Ç—å –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞. –ù–µ–¥–∞–≤–Ω–æ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫–µ –¥—Ä—É–∑—å—è —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –û–ª–µ–≥—É –æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è—Ö. –î–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ –º–∞—Å—Å–∏–≤–∞ –û–ª–µ–≥ —Ä–µ—à–∏–ª –Ω–∞—á–∞—Ç—å —Å —á–µ–≥–æ-—Ç–æ –º–∞–ª–æ–≥–æ, –∞ –∏–º–µ–Ω–Ω–æ —Å –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–π –¥–ª–∏–Ω–æ–π 3. –¢—Ä–∏ —á–∏—Å–ª–∞ Ôªø ùëé , ùëè , ùëê a,b,cÔªø –æ–±—Ä–∞–∑—É—é—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é, –µ—Å–ª–∏ Ôªø ùëè ‚àí ùëé = ùëê ‚àí ùëè . b‚àía=c‚àíb.Ôªø –û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –Ω–µ –≤—Å–µ –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–∏ –º–∞—Å—Å–∏–≤–∞ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–∞–∫–∏–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏, –ø–æ—ç—Ç–æ–º—É –û–ª–µ–≥ —Ä–µ—à–∏–ª –≤–Ω–∞—á–∞–ª–µ —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–∏ —á–∏—Å–ª–∞, –Ω–µ –º–µ–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–æ–∫, —Å –Ω—É–∂–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–æ–º. –ü–æ–¥–æ—Ç—Ä–µ–∑–∫–æ–º –º–∞—Å—Å–∏–≤–∞ Ôªø ùê¥ AÔªø –æ—Ç Ôªø ùëô lÔªø –¥–æ Ôªø ùëü rÔªø –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Ôªø ùê¥ ùëô , ùê¥ ùëô + 1 , ‚Ä¶ , ùê¥ ùëü . A l ‚Äã ,A l+1 ‚Äã ,‚Ä¶,A r ‚Äã .Ôªø –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–æ —á–∏—Å–ª–æ Ôªø ùëõ ‚àí n‚àíÔªø –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –û–ª–µ–≥–∞ Ôªø ( 3 ‚â§ ùëõ ‚â§ 1 0 5 ) . (3‚â§n‚â§10 5 ).Ôªø –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω—ã Ôªø ùëõ nÔªø —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª Ôªø ùê¥ 1 , ùê¥ 2 , ‚Ä¶ , ùê¥ ùëõ ‚àí A 1 ‚Äã ,A 2 ‚Äã ,‚Ä¶,A n ‚Äã ‚àíÔªø –ø–æ–¥–∞—Ä–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ Ôªø ( 1 ‚â§ ùê¥ ùëñ ‚â§ 10 ) . (1‚â§A i ‚Äã ‚â§10).Ôªø –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –í—ã–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –û–ª–µ–≥–∞ –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–æ–≤.
//
// –ó–∞–º–µ—á–∞–Ω–∏–µ –í –ø—Ä–∏–º–µ—Ä–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–∏ (1,3), (1, 4), (1, 5).
//
// –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
// –í–≤–æ–¥:
// 5
// 1 2 3 3 2
//
// –í—ã–≤–æ–¥: 3
const countOfSubSegments = (arr) => {
    let count = 0
    for (let i = 0; i < arr.length - 2; i++) {
        let a = arr[i]
        let b = arr[i+1]
        let c = arr[i+2]

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
        if (b-a === c-b) {
            count++
        }
    }
    return count
}