//–ù–µ–¥–∞–≤–Ω–æ –ö–∏—Ä–∏–ª–ª –Ω–∞—à–µ–ª —Å—Ç—Ä–æ–∫—É –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ï–º—É —Å—Ç–∞–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º. –°—Ç—Ä–æ–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, –µ—Å–ª–∏ –∏–∑ –Ω–µ–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª, —á—Ç–æ–±—ã –æ–Ω–∞ —á–∏—Ç–∞–ª–∞—Å—å —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ —Ç–∞–∫–∂–µ, –∫–∞–∫ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ. –ü–æ–º–æ–≥–∏—Ç–µ –ö–∏—Ä–∏–ª–ª—É —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å. –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –í –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–æ—á–Ω—ã—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤. –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –í—ã–≤–µ–¥–∏—Ç–µ Ôªø ùëå ùê∏ ùëÜ YESÔªø, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—á—Ç–∏ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, Ôªø ùëÅ ùëÇ NOÔªø –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ. –ó–∞–º–µ—á–∞–Ω–∏–µ –í –ø–µ—Ä–≤–æ–º –ø—Ä–∏–º–µ—Ä–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏, —Ç–æ–≥–¥–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ "aba"
function isPalindrome (str) {
    res = 0

    for (let i = 0; i < str.length; i++) {
        let newStr = str.slice(0, i) + str.slice(i+1)
        if (newStr === newStr.split('').reverse().join('')) {
            res += 1
        }
    }
    return res > 0 ? 'YES' : 'NO'
}

//–ü–µ—Ç—è –∏–≥—Ä–∞–ª –Ω–∞ —á–µ—Ä–¥–∞–∫–µ –∏ –Ω–∞—à–µ–ª –≤ —Å—É–Ω–¥—É–∫–µ –∑–∞–ø—ã–ª–∏–≤—à–∏–π—Å—è –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ü–µ—Ç–µ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –≤ —ç—Ç–æ–º –º–∞—Å—Å–∏–≤–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏ –µ–≥–æ –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å. –ü–µ—Ç—è –µ—â–µ –Ω–µ —Ö–æ–¥–∏—Ç –≤ —à–∫–æ–ª—É, –ø–æ—ç—Ç–æ–º—É –æ–Ω —É–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ–ª–∏—Ç—å —á–∏—Å–ª–∞ –Ω–∞ 2 —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –≤–Ω–∏–∑. –¢–µ–ø–µ—Ä—å –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–Ω –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –æ–Ω –º–æ–∂–µ—Ç —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Ä–∞–∑ –ø—Ä–æ–¥–µ–ª—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ. –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ Ôªø ùëõ nÔªø –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ Ôªø ( 1 ‚â§ ùëõ ‚â§ 2 ‚ãÖ 1 0 5 ) . (1‚â§n‚â§2‚ãÖ10 5 ).Ôªø –í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª Ôªø ùëé aÔªø –¥–ª–∏–Ω—ã Ôªø ùëõ ( 1 ‚â§ ùëé ùëñ ‚â§ 1 0 9 ) . n(1‚â§a i ‚Äã ‚â§10 9 ).Ôªø –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –í—ã–≤–µ–¥–∏—Ç–µ, –∫–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.
function howManyNumbers (length, startArr) {
    let res = []

    for (let i = 0; i < startArr.length; i++) {
        let n = startArr[i]
        while (n > 0) {
            if (!res.includes(n)) {
                res.push(n)
                break
            }
            n = Math.floor(n / 2)
        }
    }

    return res.length
}